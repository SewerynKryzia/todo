{"version":3,"sources":["Task.js","TaskList.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","_props$task","task","active","deadline","importance","id","text","doneDate","deadlineDay","Date","toLocaleDateString","react_default","a","createElement","className","onClick","doneTask","removeTask","doneDay","undoTask","TaskList","state","sort","name","sortByName","_this","setState","sortByDeadline","sortByImportance","_this$state$sort","this","_this$props","tasks","filter","done","b","toLowerCase","activeTasks","map","src_Task","key","doneTasks","noTaskTxt","length","buttonIcon","type","Fragment","Component","AddTask","today","toISOString","slice","value","handleChange","e","target","handleImportance","handleDeadline","handleSubmit","preventDefault","addTask","_this$state","onSubmit","onChange","placeholder","checked","min","App","counter","prevTasks","Object","toConsumableArray","newTask","parse","concat","index","findIndex","splice","forEach","getTime","src_AddTask","src_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12671e66.chunk.js","sourcesContent":["import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nconst Task = props => {\n    const { active, deadline, importance, id, text, doneDate } = props.task\n    if (active) {\n        const deadlineDay = new Date(deadline).toLocaleDateString();\n        return (\n            <div className={\"active-task \" + importance}>\n                <h3 className=\"task-text\">\n                    {text}\n                </h3>\n                <p className=\"task-deadline\">\n                    <span>Deadline</span>\n                    {deadlineDay}\n                </p>\n                <button className=\"done-btn\" onClick={() => props.doneTask(id)}>\n                    <i className=\"fas fa-check\"></i>\n                </button>\n                <button className=\"remove-btn\" onClick={() => props.removeTask(id)}>\n                    <i className=\"fas fa-times\"></i>\n                </button>\n            </div>\n\n        );\n    }\n    else {\n        const doneDay = new Date(doneDate).toLocaleDateString();\n        return (\n            <div className={\"inactive-task\"}>\n                <h4 className=\"task-text\">\n                    {text}\n                </h4>\n                <p className=\"task-done-date\">\n                    <span>Done Date</span>\n                    {doneDay}\n                </p>\n                <button className=\"undo-btn\" onClick={() => props.undoTask(id)}>\n                    <i className=\"fas fa-undo-alt\"></i>\n                </button>\n                <button className=\"remove-btn\" onClick={() => props.removeTask(id)}>\n                    <i className=\"fas fa-times\"></i>\n                </button>\n            </div >\n\n        );\n    }\n}\n\nexport default Task;","import React, { Component } from 'react';\nimport Task from './Task';\n\nclass TaskList extends Component {\n    state = {\n        sort: {\n            name: null,\n            deadline: null,\n            importance: null,\n        },\n    }\n\n    sortByName = () => {\n        this.setState({\n            sort: {\n                name: !this.state.sort.name,\n                deadline: null,\n                importance: null,\n            },\n        })\n    }\n\n    sortByDeadline = () => {\n        this.setState({\n            sort: {\n                name: null,\n                deadline: !this.state.sort.deadline,\n                importance: null,\n            },\n        })\n    }\n\n    sortByImportance = () => {\n        this.setState({\n            sort: {\n                name: null,\n                deadline: null,\n                importance: !this.state.sort.importance,\n            },\n        })\n    }\n\n    render() {\n        const { name, deadline, importance } = this.state.sort;\n        const { tasks, removeTask, doneTask, undoTask } = this.props;\n        const active = tasks.filter(task => task.active);\n        const done = tasks.filter(task => !task.active);\n        if (name) {\n            active.sort((a, b) => {\n                a = a.text.toLowerCase();\n                b = b.text.toLowerCase();\n                if (a < b) return -1;\n                if (a > b) return 1;\n                return 0;\n            })\n        }\n        if (name === false) {\n            active.sort((a, b) => {\n                a = a.text.toLowerCase();\n                b = b.text.toLowerCase();\n                if (a < b) return 1;\n                if (a > b) return -1;\n                return 0;\n            })\n        }\n\n        if (deadline) {\n            active.sort((a, b) => a.deadline - b.deadline)\n        }\n        if (deadline === false) {\n            active.sort((a, b) => b.deadline - a.deadline)\n        }\n\n        if (importance) {\n            active.sort((a, b) => {\n                a = a.importance.toLowerCase();\n                b = b.importance.toLowerCase();\n                if (a < b) return 1;\n                if (a > b) return -1;\n                return 0;\n            })\n        }\n        if (importance === false) {\n            active.sort((a, b) => {\n                a = a.importance.toLowerCase();\n                b = b.importance.toLowerCase();\n                if (a < b) return -1;\n                if (a > b) return 1;\n                return 0;\n            })\n        }\n\n        done.sort((a, b) => b.doneDate - a.doneDate)\n\n        const activeTasks = active.map(task => (\n            <Task key={task.id} task={task} removeTask={removeTask} doneTask={doneTask} />))\n        const doneTasks = done.map(task => (\n            <Task key={task.id} task={task} removeTask={removeTask} undoTask={undoTask} />\n        ))\n        const noTaskTxt = doneTasks.length === 0 ? \"No Tasks\" : \"All Done\";\n\n        const buttonIcon = type => {\n            if (type === null) {\n                return <i className=\"fas fa-sort\"></i>\n            } else if ((type === true && type !== importance) || (type === false && type === importance)) {\n                return <i className=\"fas fa-sort-up\"></i>\n            } else if ((type === false && type !== importance) || (type === true && type === importance)) {\n                return <i className=\"fas fa-sort-down\"></i>\n            }\n        }\n\n        return (\n            <div className=\"task-list\" >\n                <h4 className=\"list-title\">To Do [{activeTasks.length}]</h4>\n                <div className=\"sort\">\n                    <button onClick={this.sortByName}>Name {buttonIcon(name)}</button>\n                    <button onClick={this.sortByDeadline}>Deadline {buttonIcon(deadline)}</button>\n                    <button onClick={this.sortByImportance}>Importance {buttonIcon(importance)}</button>\n                </div>\n                {activeTasks.length === 0 ? <div className=\"no-task\">{noTaskTxt} <i className=\"far fa-smile\"></i></div> : <div>{activeTasks}</div>}\n                <div>\n                    {doneTasks.length === 0 ? null : <><h4 className=\"list-title\">Done [{doneTasks.length}]</h4> <div>{doneTasks}</div></>}\n                </div>\n            </div >)\n    }\n}\n\nexport default TaskList;","import React, { Component } from 'react';\n\nclass AddTask extends Component {\n    today = new Date().toISOString().slice(0, 10);\n    state = {\n        value: '',\n        importance: \"importance1\",\n        deadline: this.today,\n    }\n\n    handleChange = e => {\n        const value = e.target.value;\n        this.setState({\n            value,\n        })\n    }\n\n    handleImportance = e => {\n        const importance = e.target.value;\n        this.setState({\n            importance,\n        })\n    }\n\n    handleDeadline = e => {\n        const deadline = e.target.value;\n        this.setState({\n            deadline,\n        })\n    }\n    handleSubmit = e => {\n        e.preventDefault()\n        if (this.state.value) {\n            const addTask = this.props.addTask(this.state.value, this.state.importance, this.state.deadline)\n            if (addTask) {\n                this.setState({\n                    value: '',\n                    importance: \"importance1\",\n                    deadline: this.today,\n                })\n            }\n        }\n    }\n\n    render() {\n        const { value, importance, deadline } = this.state\n        return (\n            <form className=\"add-task\" onSubmit={this.handleSubmit}>\n                <input className=\"input-task-name\" type=\"text\" value={value} onChange={this.handleChange} placeholder=\"Task Name\" /><br />\n                <div className=\"importance\">\n                    <span className=\"importance-title\">Importance</span>\n                    <label className=\"container\">Normal\n                    <input type=\"radio\" name=\"importance\" value=\"importance1\" checked={importance === \"importance1\"} onChange={this.handleImportance} />\n                        <span className=\"checkmark normal\"></span>\n                    </label>\n                    <label className=\"container\">High\n                    <input type=\"radio\" name=\"importance\" value=\"importance2\" checked={importance === \"importance2\"} onChange={this.handleImportance} />\n                        <span className=\"checkmark high\"></span>\n                    </label>\n                    <label className=\"container\">Very High\n                    <input type=\"radio\" name=\"importance\" value=\"importance3\" checked={importance === \"importance3\"} onChange={this.handleImportance} />\n                        <span className=\"checkmark veryHigh\"></span>\n                    </label>\n                </div>\n                <span className=\"deadline-title\">Deadline</span>\n                <input className=\"input-task-deadline\" type=\"date\" value={deadline} min={this.today} onChange={this.handleDeadline} />\n                <button>Add Task</button>\n            </form>\n        );\n    }\n}\n\nexport default AddTask;","import React, { Component } from 'react';\nimport './App.sass';\nimport TaskList from './TaskList';\nimport AddTask from './AddTask';\n\nclass App extends Component {\n  counter = 3;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"Remove this task\",\n        importance: 'importance1',\n        active: true,\n        deadline: 1609372800000,\n        doneDate: null,\n      },\n      {\n        id: 1,\n        text: 'Add a new task',\n        importance: 'importance3',\n        active: true,\n        deadline: 1577750400000,\n        doneDate: null,\n      },\n      {\n        id: 2,\n        text: \"Make a To-Do List\",\n        importance: 'importance3',\n        active: false,\n        deadline: 1552999308088,\n        doneDate: 1552563880562,\n      },\n    ],\n  }\n\n  addTask = (text, importance, deadline) => {\n    const prevTasks = [...this.state.tasks];\n    const newTask = {\n      id: this.counter++,\n      active: true,\n      doneDate: null,\n      text,\n      importance,\n      deadline: Date.parse(deadline),\n\n    }\n    const tasks = [...prevTasks, newTask];\n    this.setState({\n      tasks,\n    })\n    return true;\n  }\n\n  removeTask = id => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks,\n    })\n  }\n\n  doneTask = id => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.doneDate = new Date().getTime();\n      }\n    })\n    this.setState({\n      tasks,\n    })\n  }\n\n  undoTask = id => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = true;\n        task.doneDate = \"\";\n      }\n    })\n    this.setState({\n      tasks,\n    })\n  }\n  render() {\n    return (\n      <div className=\"todo-app\">\n        <h1>To-Do List</h1>\n        <AddTask addTask={this.addTask} />\n        <TaskList tasks={this.state.tasks} removeTask={this.removeTask} doneTask={this.doneTask} undoTask={this.undoTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}